#!groovy

import hudson.model.Result
import jenkins.model.CauseOfInterruption.UserInterruption

def killOldBuilds() {
  echo "killOldBuilds Function"
  while(currentBuild.rawBuild.getPreviousBuildInProgress() != null) {
    echo currentBuild.rawBuild.getPreviousBuildInProgress().toString()
    //currentBuild.rawBuild.getPreviousBuildInProgress().doKill()
    currentBuild.rawBuild.getPreviousBuildInProgress().doStop()
  }
}

def printOldBuilds() {
  echo "printOldBuilds Function"
  def build = currentBuild.rawBuild
  while(build.getPreviousBuildInProgress() != null) {
    echo build.getPreviousBuildInProgress().toString()
    build=build.getPreviousBuildInProgress()
  }
}

/**
  * get comment from last git commit
  **/
def getLastCommit(repoName) {
  echo "getLastCommit function ${repoName}"
  
  def LAST_COMMIT = sh (returnStdout: true, script: """#!/bin/bash -e
        set -x
        git --no-pager log -1 --pretty='format:%s'
        """).trim()
    echo "last commit is ${LAST_COMMIT}"
  
  return LAST_COMMIT
}

/**
  * get git master branch Tag
  **/
def getMasterTag(repoName) {
  echo "getMasterTag function ${repoName}"

  def MASTER_TAG = sh (returnStdout: true, script: """#!/bin/bash -e
      set -x
      library/scripts/latestTag.sh ${repoName} "https://github.build.ge.com/adoption"
      """).trim()
  echo "masterTag is ${MASTER_TAG}"
  
  return MASTER_TAG
}

/**
  * get version from pom.xml, package.json, version.json or VERSION file
  **/
def getVersion(repoName) {
  echo "getVersion function ${repoName}"

  def VERSION = sh (returnStdout: true, script: """#!/bin/bash -e
      set -x
      library/scripts/version.sh ${repoName} "https://github.build.ge.com/adoption"
      """).trim()
  echo "version is ${VERSION}"
  VERSION = VERSION.replace("-SNAPSHOT","")
  echo "version is ${VERSION}"

  return VERSION
}

/**
  * Auto Increment if dev version == master tag and if changes found
  **/
def autoIncrementVersion(repoName, jobName, branch) {
  echo "autoIncrementVersion function ${repoName}, ${jobName}, ${branch}"
  
  def masterTag = getMasterTag(repoName)
  def version = getVersion(repoName)
  def lastCommit = getLastCommit(repoName)

  if ( version.equals(masterTag) ) { 
    if ( "${lastCommit}".equals("Release ${masterTag}") ) {
      echo "no commits on this repo"
    }
    else {
      echo "commits on this repo, need to increment version"
      echo "(if it fails to launch the job, you probably spelled the name of the job wrong)"
      build job: "${jobName}/${branch}",parameters: [[$class: 'StringParameterValue', name: 'INCREMENT', value: 'patch'],[$class: 'StringParameterValue', name: 'BUILD', value: 'false']] ,propagate: true, wait: true
      sh """#!/bin/bash -e
        set -xe
        git status
        git pull origin develop
        git status
      """
    }
  }
  else {
    echo "dev version is not same as master tag" 
  }
  
  def map = [masterTag: masterTag, version: version, lastCommit: lastCommit]
  return map
} 

/**
  * General Build function for all projects (Java, Javascript, Utils, Quickstart)
  **/
def buildDevelop(repoName, jobName, branch) {
  echo "buildDevelop function ${repoName}, ${jobName}, ${branch}"
  
  def mvnSettings="mvn_settings_snapshot_only.xml"
  return buildDevelop(repoName, mvnSettings, jobName, branch)
}

/**
  * General Build function, with non-default mvnSettings, for all projects (Java, Javascript, Utils, Quickstart)
  **/
def buildDevelop(repoName, mvnSettings, jobName, branch) {
  echo "buildDevelop function ${repoName}, ${mvnSettings}, ${jobName}, ${branch}"
  def versionMap = autoIncrementVersion(repoName, jobName, branch)
  echo "buildDevelop function return ${versionMap}"

  
  def triggerDependents=true
  if ( "${versionMap.lastCommit}".equals("Release ${versionMap.masterTag}") ) {
    echo "skipping build - during mergeMaster it will trigger a lot of builds that trigger more builds on dependent projects so trying to avoid that"
    triggerDependents=false
  } else if (fileExists('pom.xml')) {
    javaFunctions.buildMaven(repoName, mvnSettings)
  } else if (fileExists('package.json')) {
    jsFunctions.buildJS(repoName);
  }
  else {
    echo 'Unsupported Operation'
  }
  return triggerDependents
} 

/**
  * prepare predix user
  * For Quickstart and other scripts that should not run as root
  **/
def preparePredixUser() {
    echo "preparePredixUser function"

    sh """#!/bin/bash -e
     set -x
     chown -R predix:not-root ..
     chmod 755 ..
     ls -l ..
   """
  } 

/**
  * delete files which make the next run or release inconsistent
  **/
def cleanupAfterJob() {
    echo "cleanupAfterJob function"
    deleteDir()
    sh "ls -la"
  }


/**
  * checkout repo
  *@param repoDirectoryName - directory Name 
  *@param repoName - repoName
  *@param branch - branch
  **/
def checkoutRepoToSubdir(repoDirectoryName,repoName,branch) {
    echo "checkoutRepoForUpdate function - branch ${branch} for repo ${repoName} in directory ${repoDirectoryName}"
    dir("${repoDirectoryName}") {
      git url: "https://$GITHUB_TOKEN_ADOPTION:x-oauth-basic@github.build.ge.com/adoption/${repoName}", branch: "${branch}"
    }
} 

/**
  * setGitRemoteForUpdate
  *@param repoName - repoName
  **/
def setGitRemoteForUpdate(repoName) {
    echo "setGitRemoteForUpdate function - repo ${repoName}"
    sh """#!/bin/bash -e
      set -x
      echo "propel checks out repo with remote.origin.fetch of develop only, let's relax that to allow for merge to master"
      pwd
      git config --global user.email "predix.adoption@ge.com"
      git config --global user.name "PredixAdoptionService"
      git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
      git fetch origin
      git remote set-url origin "https://$GITHUB_TOKEN_ADOPTION:x-oauth-basic@github.build.ge.com/adoption/${repoName}"
      git remote -v
      git config --list --show-origin
    """
} 

/**
  * update git submodules
  **/
def updateSubmodules(repoName) {
  echo "updateSubmodules function for ${repoName}"
  sh """#!/bin/bash -e
  set -x
  library/scripts/updateSubmodules.sh
  """
}

/**
  * checkout Org-Migration 
  **/
def checkoutOrgMigration() {
    echo 'checking out org migration'
    dir('org-migration') {
      git url: "https://$GITHUB_TOKEN_ADOPTION:x-oauth-basic@github.build.ge.com/adoption/Org-migration.git"
    }
  } 

/**
  * checkout propel-shared-library 
  **/
def checkoutPropelSharedLibrary() {
    echo 'checking out propel-shared-library'
    echo "BUILD=${env.BUILD}\rINCREMENT=${env.INCREMENT}\rINCREMENT_DEPENDENCIES=${env.INCREMENT_DEPENDENCIES}\rMERGE_MASTER=${env.MERGE_MASTER}\rRELEASE=${env.RELEASE}\rSMOKE_TEST=${env.SMOKE_TEST}"

    dir('library') {
      git url: "https://$GITHUB_TOKEN_ADOPTION:x-oauth-basic@github.build.ge.com/adoption/propel-shared-library.git"
    }
  } 

/**
 * This method will merge a PR request with develop
 * @param repoName
 */
def mergeToDevelop(repoName) {
  echo "MergeToDevelop function - $pullTarget stage"
  script {
    sh "curl -o - -s -w \"\n%{http_code}\n\" -X PUT -d '{\"commit_title\": \"$CHANGE_TITLE\"}'  https://github.build.ge.com/api/v3/repos/adoption/${repoName}/pulls/$CHANGE_ID/merge?access_token=$GITHUB_TOKEN_ADOPTION | tail -1 > mergeResult.txt"
    sh "cat mergeResult.txt"
    def mergeResult = readFile('mergeResult.txt').trim()
    if (mergeResult != "200") {
        error "Unable to merge!"
    } else {
        // Send a Slack message, etc
        echo "MergeTo $pullTarget completed with status code $mergeResult"
    }
  }
}
 

/**
 * This method will merge develop to master
 * @param - repoName
 */
def mergeToMaster(repoName) {
  echo "MergeToMaster function for ${repoName}"
  def willRelease = "true"
  mergeToMaster(repoName, willRelease)
  }

/**
 * This method will merge develop to master
 * @param - repoName
 */
def mergeToMaster(repoName,willRelease) {
  echo "MergeToMaster function for ${repoName} ${willRelease}"
  setGitRemoteForUpdate(repoName)
  sh """#!/bin/bash -e
    set -x
    set -e
    chmod 755 library/scripts/mergeToMaster.sh
    library/scripts/mergeToMaster.sh ${repoName} ${willRelease}
  """
  
}

/**
 * This method will run the quickstart script for the repo
 * @param - repoName
 */
def runQuickstart(repoName, script, moreSwitches, instancePrepender, branch, mvnSettings) {
  echo "runQuickstart function for ${repoName}, ${script}, ${moreSwitches}, ${instancePrepender}, ${branch}, ${mvnSettings}"
  preparePredixUser()
  sh """#!/bin/bash -e
    set -x
    set -e
    if [ -d "quickstart" ]; then
      rm -rf quickstart
    fi
    sudo -u predix mkdir quickstart
    cd quickstart
    curl -O https://github.build.ge.com/raw/adoption/${repoName}/${branch}/scripts/${script};
    chmod 755 ${script}
    sudo -u predix ./${script} "${moreSwitches}" --skip-setup -i ${instancePrepender} -b ${branch} -s ${env.WORKSPACE}/library/scripts/${mvnSettings}
    """
}


  /**
 * This method will Increment in develop
 * @param - repoName
 * @param - type: 'patch' | 'minor' | 'major'
 */
def incrementVersion(repoName, type) {
  echo "incrementVersion function - repo ${repoName}, type ${type}"
  setGitRemoteForUpdate(repoName)

  script {
    if (type != 'major' && type != 'minor' && type != 'patch') {
      echo "Invalid increment type: ${type}"
      echo "Not incrementing."
      return;
    } else {
      echo "increment by ${type} for ${repoName}"
      sh """#!/bin/bash -e
        set -x
        set -e
        echo "git checkout develop"
        git checkout develop
        git pull
        if [ -e "package.json" ]; then
          echo "increment for package.json"
          npm --no-git-tag-version version ${type}
        fi
        if [ -e "version.json" ]; then
          if [ -e "package.json" ]; then
            mv package.json package-orig.json
          fi
          echo "increment for version.json"
          mv version.json package.json
          npm --no-git-tag-version version ${type}
          mv package.json version.json
          if [ -e "package-orig.json" ]; then
            mv package-orig.json package.json
            cat package.json
          fi
          cat version.json
        fi
        if [ -e "pom.xml" ]; then
          echo "increment for pom.xml"
          chmod 755 library/scripts/versionIncrementMaven.sh
          library/scripts/versionIncrementMaven.sh ${env.WORKSPACE} 
        fi

        git commit -am 'Jenkins: Version increment for develop';
        git remote -v
        git push --set-upstream origin develop
        git status
        git log -n 3
      """
    }
  }
}

/**
 * This method will Increment in develop
 * @param - repoName
 */
def incrementDependencies(repoName) {
  echo "incrementDependencies function for ${repoName}"
  setGitRemoteForUpdate(repoName)

  sh """#!/bin/bash -e
    set -x
    set -e
    git checkout develop
    if [ -e "pom.xml" ]; then
      if [ ${repoName} == "predix-rmd-ref-app" ]; then
        echo "skipping increment for maven submodule projects"
      else
        chmod 755 library/scripts/versionIncrementMavenDependencies.sh 
        library/scripts/versionIncrementMavenDependencies.sh ${env.WORKSPACE} ${repoName}
      fi
    fi
    if [ -e "version.json" ]; then
      echo "FYI, skipping assignment of dependency versions because we use the #develop concept
    fi
    if [ -e "package.json" ]; then
      echo "FYI, skipping assignment of dependency versions because we use the ^1.x.x concept
    fi
    git status
    commitsFound=`git status | grep -E "Your branch is ahead|Changes to be committed|Changes not staged for commit" | wc -l`
    if [ "\$commitsFound" -gt "0" ]; then
      echo "commit dependency changes"
      git commit -am 'Jenkins: Dependency increment for develop';
      echo "commited dependency changes"
      git status
      echo "git push dependency changes"
      git push --set-upstream origin develop
      echo "git pushed dependency changes"
    fi
  """
}
