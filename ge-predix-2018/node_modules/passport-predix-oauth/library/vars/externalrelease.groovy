#!groovy

import hudson.model.Result
import jenkins.model.CauseOfInterruption.UserInterruption


/**
 * This method will release to github
 * @param - repoName
 */
def releaseToGithub(repoName) {
 echo "releaseToGithub function for ${repoName}"
  env.EXT_GIT_USER='predix-adoption-bot'
  env.EXT_GIT_PASS='Predix2015'
 
  def masterTag = internalrelease.getMasterTag(repoName)
  def version = internalrelease.getVersion(repoName)
  def lastCommit = internalrelease.getLastCommit(repoName)
  
  //if (fileExists('pom.xml')) {
    //javaFunctions.releaseToArtifactoryMaven(repoName)
  //}

  sh """#!/bin/bash -e
    set -x
    set -ee
    export GITHUB_REPO_URL="https://github.build.ge.com/adoption"
    export GITHUB_REPO=\$GITHUB_REPO_URL/${repoName}
    export GITHUB_BRANCH=master
    library/scripts/releaseToExternal.sh $EXT_GIT_USER $EXT_GIT_PASS ${version} ${env.WORKSPACE}/library/scripts/mvn_settings_external.xml
  """
}

/**
 * This method will conduct a smoke test on demand
 * @param - repoName
 */
def smokeTest(repoName, pushToCloud, getFromNPM) {
  echo "smokeTest function for ${repoName}, pushToCloud=${pushToCloud}, getFromNPM=${getFromNPM}"
  internalrelease.preparePredixUser()
  sh """#!/bin/bash -e
    set -x
    set -e
    export GITHUB_URL="https://github.com/PredixDev/${repoName}"
    export GITHUB_BRANCH=master
    export GITHUB_REPO=${repoName}
    pwd
    sudo -u predix library/scripts/smokeTest.sh -g \$GITHUB_URL -b \$GITHUB_BRANCH -r \$GITHUB_REPO --push $pushToCloud --npm $getFromNPM  
  """
}

/**
 * This method will conduct a smoke test on demand
 * @param - repoName
 
 */
def smokeTest(repoName) {
  echo "smokeTest function for ${repoName}"
  def pushToCloud = "false"
  def getFromNPM = "false"
  smokeTest(repoName, pushToCloud, getFromNPM )
}


/**
 * This method will conduct a smoke test on demand
 * @param - repoName
 */
def smokeTest(repoName, pushToCloud) {
  echo "smokeTest function for ${repoName}"
  def getFromNPM = "false"
  smokeTest(repoName, pushToCloud, getFromNPM)
}


/**
 * This method will conduct a smoke test on demand
 * @param - repoName
 */
def smokeTestWithNPM(repoName) {
  echo "smokeTest function for ${repoName}"
  def pushToCloud = "false"
  def getFromNPM = "true"
  smokeTest(repoName, pushToCloud, getFromNPM)
}

/**
 * This method will create a new working directory, and run quickstart there.
 * @param - repoName
 */
def smokeTestWithQuickstart(repoName, script, moreSwitches, instancePrepender, branch, mvnSettings, workingDir) {
  echo "smokeTestWithQuickstart function for ${repoName}, ${script}, ${moreSwitches}, ${instancePrepender}, ${branch}, ${mvnSettings}, ${workingDir}"
  internalrelease.preparePredixUser()
  sh """#!/bin/bash -e
    set -x
    set -e
    if [ -d "${workingDir}" ]; then
      rm -rf ${workingDir}
    fi
    sudo -u predix mkdir ${workingDir}
    cd ${workingDir}
    sudo -u predix curl -O https://raw.githubusercontent.com/PredixDev/${repoName}/${branch}/scripts/${script};
    
    chmod 755 ${script}
    sudo -u predix ./${script} ${moreSwitches} --skip-setup -i ${instancePrepender} -b ${branch} -s ${env.WORKSPACE}/library/scripts/${mvnSettings}                        
  """
}

def loginToPop(pop) {
  switch (pop) {
    case "uswest":
      cloudFoundry.loginToUSW()
      break
    case "useast":
      cloudFoundry.loginToUSEast()
      break
    case "frankfurt":
      cloudFoundry.loginToFrankfurt()
      break
    case "japan":
      cloudFoundry.loginToJapan()
      break
  }             
}

/**
 * This method will create a new working directory, and run quickstart there.
 * @param - repoName
 */
def smokeTestWithQuickstart(repoName, jobName, popsArray, script, moreSwitches, instancePrepender, branch, mvnSettings) {
 echo "smokeTestWithQuickstart pops function for ${repoName}, ${jobName}, ${popsArray}, ${script}, ${moreSwitches}, ${instancePrepender}, ${branch}, ${mvnSettings}"
  if (popsArray.length > 1) {
    // build a map of functions to pass to the "parallel" command
    def jobsMap = [:]
    popsArray.each { pop ->
      jobsMap[pop] =  { 
        // kick off this same build again, with just one pop, so we can run in parallel
       build job: "${jobName}/master",parameters: [[$class: 'StringParameterValue', name: 'SMOKE_TEST', value: 'true'], [$class: 'StringParameterValue', name: 'POPS', value: "${pop}"],[$class: 'StringParameterValue', name: 'BUILD', value: 'false']] ,propagate: true, wait: true
      }
    }
    parallel jobsMap
  } else { // actually run the quickstart
    loginToPop(popsArray[0])
    smokeTestWithQuickstart(repoName, script, moreSwitches, instancePrepender, branch, mvnSettings, popsArray[0])
  }
}
