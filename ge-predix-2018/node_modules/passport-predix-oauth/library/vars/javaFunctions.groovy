#!/usr/bin/env groovy

/**
 * This method will build java repos
 * @param - repoDirName
 */
def buildMaven(repoDirName, mvnSettingsFile) {
  internalrelease.setGitRemoteForUpdate(repoDirName)
  echo "buildMaven function for ${repoDirName}"
  sh """#!/bin/bash -e
    set -x
    set -e
    rm -rf /root/.m2/repository/com/ge/predix/solsvc
    if [ -r ./scripts/deployPiDependencies.sh ]; then
      ./scripts/deployPiDependencies.sh
    fi
    if [ -e .gitmodules ]; then
      cp .gitmodules .gitmodules_orig
      cp scripts/.gitmodules_develop .gitmodules
      ./scripts/pullSubModules.sh
      mv .gitmodules_orig .gitmodules
      #we could run mvn clean package or install here, but for now we skip it.
    else
      mvn -Dpredix.rest.useProxyPropertiesFromFile=false -B -DaltDeploymentRepository=artifactory.snapshots::default::https://devcloud.swcoe.ge.com/artifactory/PREDIX-SNAPSHOT -DaltSnapshotDeploymentRepository=artifactory.snapshots::default::https://devcloud.swcoe.ge.com/artifactory/PREDIX-SNAPSHOT source:jar javadoc:jar deploy -U -s ${env.WORKSPACE}/library/scripts/${mvnSettingsFile} -Dartifactory.password=$DEVCLOUD_ARTIFACTORY_CREDS_PSW
    fi

    echo "mvn clean deploy complete"
  """
}

/**
 * This method will build java repos
 * @param - repoDirName
 */
def pushJavaProjectToCloud(repoDirName, serviceName) {
  pushJavaProjectToCloud(repoDirName, serviceName, "manifest-integration.yml")
}

/**
 * This method will build java repos
 * @param - repoDirName
 */
def pushJavaProjectToCloud(repoDirName, appName, manifestFile) {
  echo "Creating app ${appName}"
  cloudFoundry.loginToUSW()
  sh """#!/bin/bash -e
  set -x
  set -e
  cat ${manifestFile}
  sudo -u predix cf push ${appName} -f ${manifestFile}
  sudo -u predix cf logs ${appName} --recent
  """
}

/**
 * This method will build and deploy kitService hack-integration-kit-service to cf integration space
 * @param - repoDirName
 * @param - serviceName
 */
def buildAndDeployKitServiceNoStart(repoDirName, serviceName) {
  echo "build and deploy service hack-integration-kit-service for ${repoDirName}"
  cloudFoundry.loginToUSW()
  sh """#!/bin/bash -e
  set -x
  set -e
  cat manifest-integration.yml
  sudo -u predix cf push ${serviceName} -f manifest-integration.yml --no-start
  sudo -u predix cf set-env ${serviceName} ARTIFACTORY_USERNAME "${EXT_ARTIFACTORY_USER_CREDS_USR}"
  sudo -u predix cf set-env ${serviceName} ARTIFACTORY_APIKEY "${EXT_ARTIFACTORY_USER_CREDS_PSW}"
  sudo -u predix cf restart ${serviceName}
  sudo -u predix cf env ${serviceName}
  sudo -u predix cf logs ${serviceName} --recent
  """
}

/**
 * This method will show maven info on failure
 * @param - repoDirName
 */
def buildMavenFailed(repoDirName) {
  echo "buildMavenFailed function for ${repoDirName}"
  sh """#!/bin/bash -e
    set -x
    set -e
    if [ -e target/failsafe-reports/failsafe-summary ]; then
      cat target/failsafe-reports/failsafe-summary
    fi
    if [ -e target/failsafe-reports ]; then
      ls -l target/failsafe-reports
      find target/failsafe-reports/ -name *.txt | xargs cat
    fi
  """
}


/**
 * This method will test maven in master
 * @param - repoDirName
 */
def testMasterMaven(repoDirName) {
  echo "testMasterMaven function for ${repoDirName}"
  internalrelease.setGitRemoteForUpdate(repoDirName)
  sh """#!/bin/bash -e
    set -x
    rm -rf /root/.m2/repository
    git checkout master
    git status
    mvn clean package -Dpredix.rest.useProxyPropertiesFromFile=false -B javadoc:jar -s library/scripts/mvn_settings_master.xml
    echo "testMasterMaven - mvn clean package complete"
    ${env.WORKSPACE}/library/scripts/gitHubPages.sh
    echo "github pages complete"
  """
}


/**
 * This method will test maven in master
 * @param - repoDirName
 */
def testMasterExternalMaven(repoDirName) {
  echo "testMasterMaven function for ${repoDirName}"
  internalrelease.setGitRemoteForUpdate(repoDirName)
  sh """#!/bin/bash -e
    set -x
    rm -rf /root/.m2/repository
    git checkout master
    git status
    mvn clean package -B -s library/scripts/mvn_settings_external.xml
    echo "testMasterMaven - mvn clean package complete"
  """
}

/**
*
*
*/
def deployInternalArtifactory(repoDirName) {
  echo "deployInternalArtifactory function for ${repoDirName}"
  sh """#!/bin/bash -e
    set -x
    set -e

    mvn -B -DaltDeploymentRepository=artifactory.releases::default::https://devcloud.swcoe.ge.com/artifactory/PREDIX deploy -U  -s ${env.WORKSPACE}/library/scripts/mvn_settings_snapshot.xml
    echo "deployInternalArtifactory complete"
  """
}



/**
 * This method will build target jar for cf deploy
 * @param - repoDirName
 */
def copySnaphotMavenJar(repoDirName) {
  echo "buildDeployMaven function for ${repoDirName}"
  sh """#!/bin/bash -e
    set -x
    set -e

    mvn -Dpredix.rest.useProxyPropertiesFromFile=false -B clean dependency:copy -s ${env.WORKSPACE}/library/scripts/mvn_settings_snapshot.xml
    echo "copySnapshotMavenJar complete"
  """
}

/**
 * This method will release to artifactory
 * @param - repoDirName
 */
def releaseToArtifactoryMaven(repoDirName) {
  echo "releaseToArtifactoryMaven function for ${repoDirName}"
  echo "${env.WORKSPACE}/library/scripts/mvn_settings_external.xml"

  sh """#!/bin/bash -e
    set -x
    set -e
    if [ ! -e .gitmodules ]; then 
      mvn -DskipTests -Dpredix.rest.useProxyPropertiesFromFile=false -B -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -DaltDeploymentRepository=predix.repo::default::https://artifactory.predix.io/artifactory/PREDIX-EXT clean source:jar javadoc:jar deploy -s ${env.WORKSPACE}/library/scripts/mvn_settings_external.xml
    fi
    echo "releaseToArtifactoryMaven complete"
  """
}
