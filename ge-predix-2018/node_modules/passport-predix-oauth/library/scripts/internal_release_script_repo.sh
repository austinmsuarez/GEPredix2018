#!/bin/bash

echo internal_release_script_repo.sh $1
set -e
set -x 
git status
git checkout develop
git pull
#library/scripts/updateSubmodules.sh
devVersion=$(library/scripts/version.sh)
echo "devVersion=x$devVersion x"
origDevVersion=$devVersion
if [ -e version.json ]; then
  cp version.json version_develop.json
fi
if [ -e ./LICENSE.md ]; then
  echo "updating license file..."
  cp library/resources/LICENSE.md LICENSE.md
  git status
  updatesFound=`git status | grep -E "Changes not staged for commit" | wc -l`
  echo "updatesFound=$updatesFound"
  if [ "$updatesFound" -gt "0" ]; then
    git add LICENSE.md
    git commit -m "update LICENSE.md"
    git push
  else
    echo "no updates found in license file"
  fi
fi

echo "Merging to master..."
git checkout master
git pull

if [ -e .gitmodules ]; then
  set +e
  cp .gitmodules .gitmodules_orig
  cp scripts/.gitmodules_master .gitmodules
  ./scripts/pullSubModules.sh
  git merge --no-commit -Xtheirs develop
  cp .gitmodules_orig .gitmodules
  git add -u
  set -e
else
  git merge --no-commit -Xtheirs develop
fi
git status
commitsFound=`git status | grep -E "Your branch is ahead|Changes to be committed" | wc -l`
echo "commitsFound=$commitsFound"
SKIP_COMMIT=false
if [ "$commitsFound" -gt "0" ]; then
  masterTag=$(library/scripts/latestTag.sh $1 "https://github.build.ge.com/adoption")
  echo "masterTag=$masterTag for $1"
  devVersion=$(echo $devVersion | sed  's/-SNAPSHOT//g')
  echo "devVersion=$devVersion"
  if [ "$devVersion" == "$masterTag" ]; then
    echo "*******************************************************************************"
    echo "Commits found and devVersion=$devVersion is same as masterTag=$masterTag, exiting with error"
    echo "*******************************************************************************"
    sleep 2
    exit 1
  fi
else
  export SKIP_COMMIT=true
  echo "********************************************************************************"
  echo "no changes found, exiting this function."
  echo "********************************************************************************"
  sleep 2
  exit 0
fi

if [ -e manifest.yml ]; then
  sed -i 's/-SNAPSHOT//g' manifest.yml
  if [ -e manifest.yml.template ]; then
    sed -i 's/-SNAPSHOT//g' manifest.yml.template
    cp manifest.yml.template manifest.yml
  fi
  if [ -e manifest-integration.yml ]; then
    sed -i 's/-SNAPSHOT//g' manifest-integration.yml
  fi
fi

if [ -e pom.xml ]; then
  echo "maven - remove snapshot versions"
  #mvn build-helper:parse-version versions:set -DnewVersion="\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}"
  #mvn versions:update-properties -Dincludes="com.ge.predix.solsvc" -DallowSnapshots=false -s library/scripts/mvn_settings_master.xml 
  
  #parent pom
  echo "parse parent pom"
  mvn build-helper:parse-version versions:set -B -DnewVersion="\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}"
  if [ ! -e .gitmodules ]; then 
    for d in */; do
      # Will print */ if no directories are available
      echo "$d"
      cd $d
      if [[ -e pom.xml ]]; then 
        echo "parsing child pom"
        mvn build-helper:parse-version versions:set -B -DnewVersion="\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}"
        echo "parsing child pom complete"
      fi
      cd ..
    done
    #parent pom
    echo "updating parent pom and multi-module poms"
    mvn versions:update-properties -B -Dincludes="com.ge.predix.*" -DallowSnapshots=false -s library/scripts/mvn_settings_master.xml 
    echo "updating parent pom and multi-module poms complete"

    echo "deploying to internal artifactory"
    mvn -DskipTests -B -DaltDeploymentRepository=artifactory.releases::default::https://devcloud.swcoe.ge.com/artifactory/PREDIX deploy -U -s library/scripts/mvn_settings_master.xml 
  fi

  echo "maven - remove snapshot versions complete"
fi

if [ -e version.json ]; then
  echo "Version.json path.  Merging to master..."
  mv version_develop.json version.json

  #Loop across all the dependencies in develop ending with #develop and update to latest tag
  echo "Reading dependencies..."
  declare -a deps=($(jq -r '.dependencies | keys | .[]' version.json))
  for dep in "${deps[@]}"
  do
    url=$(jq -r ".dependencies[\"$dep\"]" version.json | awk -F'#' '{print $1}')
    branch=$(jq -r ".dependencies[\"$dep\"]" version.json | awk -F'#' '{print $2}')
    if [[ $branch == "develop" ]]; then
      if [[ $1 == $dep ]]; then
        echo "Found a self-dependency.  Setting version to latest."
        tag=$devVersion
      else
        echo -n "Fetching latest tag for $dep... "
        tag=$(library/scripts/latestTag.sh $dep $url)
      fi
    else
      tag=$branch
    fi
    echo $tag

    #to avoid merge conflicts, change develop version.json file, not master version.json file
    jq ".dependencies[\"$dep\"]=\"$url#$tag\"" version.json > version_new.json
    mv version_new.json version.json

    #in all files in this directory and below, look for variable with the dependency key from the version.json
    #e.g. if dependency is to project local-setup
    #change any variables in scripts where LOCAL_SETUP_BRANCH = "0.9" and change to LOCAL_SETUP_BRANCH = "1.0", where 1.0 is the new tag
    dep_var=$(echo ${dep//-/_}_BRANCH | awk '{print toupper($0)}')
  done

  echo "Updated version.json dependencies."
fi

echo "devVersion=$origDevVersion, masterTag=$masterTag"

if [[ "$SKIP_COMMIT" == "false" ]]; then
  echo "********************************************************************************"
  echo "changes found, commit and tag with $devVersion"
  echo "********************************************************************************"
  sleep 2
  library/scripts/commit_tag.sh $1
else
  echo "skipping commit and tag"
fi

WILL_RELEASE=$2
if [[ "$WILL_RELEASE" == "true" ]]; then
  for d in */; do
        # Will print */ if no directories are available
        echo "$d"
        cd $d
        if [[ -e scripts/release.sh ]]; then 
          chmod +x scripts/release.sh
          scripts/release.sh
        fi
        cd ..
  done
  chmod +x scripts/release.sh
  scripts/release.sh    
  if [[ -e scripts/merge.sh ]]; then 
    chmod +x scripts/merge.sh
    scripts/merge.sh
  fi
  chmod +x library/scripts/checkErrors.sh
  ./library/scripts/checkErrors.sh
fi



